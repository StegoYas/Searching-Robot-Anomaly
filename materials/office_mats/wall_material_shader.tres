[gd_resource type="ShaderMaterial" load_steps=8 format=3 uid="uid://ct6ya1121r44a"]

[ext_resource type="Texture2D" uid="uid://cul0eckatggap" path="res://textures/walls_floor/T_uikpbgjdy_8K_B.png" id="1_217lv"]
[ext_resource type="Texture2D" uid="uid://dowahgjxs5op6" path="res://textures/baked_light/WallsFloorRoof_Bake_Div.png" id="2_k2vc4"]
[ext_resource type="Texture2D" uid="uid://byhyx4nfkmnwc" path="res://textures/walls_floor/T_uikpbgjdy_8K_N.png" id="3_p0xhm"]
[ext_resource type="Texture2D" uid="uid://b30vby77b8bwp" path="res://textures/walls_floor/T_uikpbgjdy_8K_ORM.png" id="4_tf3w6"]

[sub_resource type="Shader" id="Shader_217lv"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.beta4's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, unshaded;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_g, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);

uniform sampler2D texture_detail_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_detail_normal : hint_normal, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_detail_mask : hint_default_white, filter_linear_mipmap, repeat_enable;
varying vec3 uv1_triplanar_pos;
varying vec3 uv3_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;
varying vec3 uv3_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D noise : hint_default_white, filter_linear_mipmap, repeat_enable;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
	//
	uv3_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv3_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * (uv1_scale*2.0) + (uv1_offset);
	uv3_power_normal /= dot(uv3_power_normal, vec3(1.0));
	uv3_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	vec4 albedo_tex_2 = triplanar_texture(texture_albedo, uv3_power_normal, uv3_triplanar_pos);
	albedo_tex = mix(albedo_tex, albedo_tex_2, texture(noise, UV).r);
	ALBEDO = albedo.rgb * albedo_tex.rgb * 1.4;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(0.0, 1.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Detail: Enabled
	// vec4 detail_tex = triplanar_texture(texture_detail_albedo, uv1_power_normal, uv1_triplanar_pos);
	vec4 detail_tex = texture(texture_detail_albedo, UV);
	vec4 detail_norm_tex = triplanar_texture(texture_detail_normal, uv1_power_normal, uv1_triplanar_pos);
	vec4 detail_mask_tex = triplanar_texture(texture_detail_mask, uv1_power_normal, uv1_triplanar_pos);

	// Detail Blend Mode: Add
	vec3 detail = mix(ALBEDO.rgb, ALBEDO.rgb * detail_tex.rgb, detail_tex.a);
	vec3 detail_norm = mix(NORMAL_MAP, detail_norm_tex.rgb, detail_tex.a);
	NORMAL_MAP = mix(NORMAL_MAP, detail_norm, detail_mask_tex.r);
	ALBEDO.rgb = mix(ALBEDO.rgb, detail, detail_mask_tex.r);

	//ALBEDO = texture(noise, UV).rgb;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_217lv"]
noise_type = 0
frequency = 0.1
fractal_type = 0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_k2vc4"]
noise = SubResource("FastNoiseLite_217lv")

[resource]
render_priority = 0
shader = SubResource("Shader_217lv")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("1_217lv")
shader_parameter/albedo_texture_size = Vector2i(8192, 8192)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_roughness = ExtResource("4_tf3w6")
shader_parameter/specular = 0.1
shader_parameter/metallic = 0.0
shader_parameter/texture_normal = ExtResource("3_p0xhm")
shader_parameter/normal_scale = 0.1
shader_parameter/texture_detail_albedo = ExtResource("2_k2vc4")
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/noise = SubResource("NoiseTexture2D_k2vc4")
